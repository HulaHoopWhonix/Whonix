#!/bin/bash

: "See LICENSE in root of Whonix source for copyright, license and authors."

script_help() {
: "help: FLAGS / WORKFLOW:"
: "help:"
: "help: -tg-createimg"
: "help: -tg-copyimg"
: "help: -tg-copyinto"
: "help: -tg-chroot"
: "help: -tg-source"
: "help: -tg-converttovdi"
: "help: -tg-createvboxvm"
: "help: -tg-export"
: "help: (debugging) -tg-interactive"
: "help: (debugging) -tg-mountimg"
: "help: (debugging) -tg-unmountimg"
: "help: (debugging) -tg-mountvdi"
: "help: (debugging) -tg-unmountvdi"
: "help: (perhaps) -tg-vboxdelete"
:
: "help: Only for Whonix-Gateway on Bare Metal (Physical Isolation)."
: "help: -tg-bare-metal"
:
: "help:"
: "help: -tw-createimg"
: "help: -tw-copyimg"
: "help: -tw-copyinto"
: "help: -tw-chroot"
: "help: -tw-source"
: "help: -tw-converttovdi"
: "help: -tw-createvboxvm"
: "help: -tw-export"
: "help: (debugging) -tw-interactive"
: "help: (debugging) -tw-mountimg"
: "help: (debugging) -tw-unmountimg"
: "help: (debugging) -tw-mountvdi"
: "help: (debugging) -tw-unmountvdi"
: "help: (perhaps) -tw-vboxdelete"
:
: "help: Only for Workstation on Bare Metal (Physical Isolation)."
: "help: -tw-bare-metal"
:
: "help:"
}

# Variables are set in -tw/g parameters at the bottom
# of this script.
# - VMNAME
# - VMRAM



##############################################################################################
# error_handler
##############################################################################################
set -x

error_handler() {
: echo "
#!!! ERROR in whonix_createvm !!!#
#!!! ERROR in whonix_createvm !!!#
#!!! ERROR in whonix_createvm !!!#
"
: echo "whonix_createvm: Does the VM already exist?"
: echo "whonix_createvm: X is a variable, use g or t."
: echo "whonix_createvm: If you want to delete an old VM use sudo ./whonix_createvm -tX-vboxdelete"

touch /home/$USERNAME/whonix_binary/WHONIX_BUILD_FAILED
exit 1
}

trap "error_handler" ERR INT TERM



##############################################################################################
# variables
##############################################################################################

USERNAME="user"
WHONIX_SOURCE_FOLDER="/home/$USERNAME/Whonix"
HOMEVAR="/home/$USERNAME"

SNAPSHOT_DESCRIPTION="
   Reverts your Virtual Machine back to a clean state.
   All changes, all installed packages, all data you created will be lost!
"

ionice -c3 -p$$
ionice
renice +19 -p $$
nice

##############################################################################################
# source
##############################################################################################

source "$WHONIX_SOURCE_FOLDER"/int_whonix_image
source "$WHONIX_SOURCE_FOLDER"/int_copy_shared
source "$WHONIX_SOURCE_FOLDER"/int_copy_gateway
source "$WHONIX_SOURCE_FOLDER"/int_copy_workstation

##############################################################################################
# root_check
##############################################################################################

root_check() {
  if [ "$(id -u)" != "0" ]; then
       : echo "ERROR: This must be run as root (sudo)!"
       exit 1
  else
       : echo "INFO: Script running as root."
  fi
}



general_setup() {
trap "error_handler" ERR INT TERM

# Create a new VM. Name: $VMNAME
sudo -u $USERNAME VBoxManage createvm --name "$VMNAME" --register

# Debian
sudo -u $USERNAME VBoxManage modifyvm "$VMNAME" --ostype Debian

# Add SATA Controller.
sudo -u $USERNAME VBoxManage storagectl "$VMNAME" --add sata --name "$VMNAME"

# HDD gets added in specific_setup.

# Only 4 sata ports instead of 30. Speeds up booting.
sudo -u $USERNAME VBoxManage storagectl "$VMNAME" --name "$VMNAME" --sataportcount 4

# Add CD-ROM
sudo -u $USERNAME VBoxManage storageattach "$VMNAME" --storagectl "$VMNAME" --type dvddrive --port 1 --medium emptydrive

# RAM
sudo -u $USERNAME VBoxManage modifyvm "$VMNAME" --memory $VMRAM

# Enable PAE.
sudo -u $USERNAME VBoxManage modifyvm "$VMNAME" --pae on

# Hide hosts CPU info. This does not have a GUI option.
sudo -u $USERNAME VBoxManage modifyvm "$VMNAME" --synthcpu on

# REVIEW
# ACPI boots up the VM boot process. It has not been reviewed if this is good or bad for security.
sudo -u $USERNAME VBoxManage modifyvm "$VMNAME" --acpi on

# REVIEW
# ACPI boots up the VM boot process. It has not been reviewed if this is good or bad for security.
sudo -u $USERNAME VBoxManage modifyvm "$VMNAME" --ioapic on

# Set system clock of VM to UTC.
# When Virtual Box starts it looks up date and time of the host, i.e. "JAN 15 2012 00:00:00"
# and sets the VM clock to that date and time. The following option translates the date
# and time to UTC, thus hiding the hosts timezone from the guest.
sudo -u $USERNAME VBoxManage modifyvm "$VMNAME" --rtcuseutc on

# Deactivate time synchronization between host and VMs.
# This is documented in Whonix Design on TimeSync page
# Thanks to
# http://www.braingia.org/webnotes/2011/06/22/disable-time-sync-with-virtualbox/
sudo -u $USERNAME VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/VMMDev/0/Config/GetHostTimeDisabled" "1"

# Disable clipboard sharing. Only matters if guest additions are installed which is recommend against.
# Just in case.
sudo -u $USERNAME VBoxManage modifyvm "$VMNAME" --clipboard disabled
}



gateway_specific() {
trap "error_handler" ERR INT TERM

# VM UUID
# Thanks to:
# http://www.windowstablettv.com/windows-tips/190-virtualbox-clone-windows-activation/
sudo -u $USERNAME VBoxManage modifyvm "$VMNAME" --hardwareuuid "dbc5316a-2600-4d6e-8964-a07f3de5ded8"

# HD UUID
# Thanks to:
# http://michail.flouris.net/2011/11/virtualbox-vm-disk-clone-uuid-problem/
sudo -u $USERNAME VBoxManage internalcommands sethduuid "$HOMEVAR/VirtualBox VMs/$VMNAME/$VMNAME.vdi" "0156199f-6e83-4cd6-97b7-c9e24d9cd26d"

# Attach the HDD.
sudo -u $USERNAME VBoxManage storageattach "$VMNAME" --storagectl "$VMNAME" --type hdd --port 0 --medium "$HOMEVAR/VirtualBox VMs/$VMNAME/$VMNAME.vdi"

# Leave Adapter 1 as NAT.
sudo -u $USERNAME VBoxManage modifyvm "$VMNAME" --nic1 nat

# REVIEW
# NAT adapter also gets fixed MAC shared among all Whonix users.
# Use cases:
# - Whonix-Workstation can see it.
# - See Whonix Security page about Whonix in public networks / MAC address
# - In case the Gateway gets broken, this one can not be used as identifier.
#   Gets interesting in future with multiple gateways.
sudo -u $USERNAME VBoxManage modifyvm "$VMNAME" --macaddress1 0800273A77FC

# Prevents leaking DNS info from the host into the guest.
# Also useful in other cases.
# https://www.virtualbox.org/manual/ch09.html#nat-adv-dns
sudo -u $USERNAME VBoxManage modifyvm "$VMNAME" --natdnsproxy1 on

# Prevents leaking DNS info from the host into the guest.
# Also useful in other cases.
# https://www.virtualbox.org/manual/ch09.html#nat_host_resolver_proxy
sudo -u $USERNAME VBoxManage modifyvm "$VMNAME" --natdnshostresolver1 on

# Do not pass the domain name for network name resolution to the VM.
sudo -u $USERNAME VBoxManage modifyvm "$VMNAME" --natdnspassdomain1 off

# Enable Adapter 2, set to "Internal Network".
sudo -u $USERNAME VBoxManage modifyvm "$VMNAME" --nic2 intnet

# Change the internal network to "Whonix", IMPORTANT!
sudo -u $USERNAME VBoxManage modifyvm "$VMNAME" --intnet2 "Whonix"

# Enter following MAC address: 0800272FCF44
sudo -u $USERNAME VBoxManage modifyvm "$VMNAME" --macaddress2 0800272FCF44
}



workstation_specific() {
trap "error_handler" ERR INT TERM

# VM UUID
# Thanks to:
# https://forums.virtualbox.org/viewtopic.php?f=2&t=22653&start=75
sudo -u $USERNAME VBoxManage modifyvm "$VMNAME" --hardwareuuid "05f2222c-9697-485b-b105-267a36c401fc"

# HD UUID
# Thanks to:
# http://mixeduperic.com/ubuntu/how-to-copy-a-virtualbox-virtual-machine-in-ubuntu.html
sudo -u $USERNAME VBoxManage internalcommands sethduuid "$HOMEVAR/VirtualBox VMs/$VMNAME/$VMNAME.vdi" "77d55d86-800c-4667-9e60-678f81a50913"

# Attach the HDD.
sudo -u $USERNAME VBoxManage storageattach "$VMNAME" --storagectl "$VMNAME" --type hdd --port 0 --medium "$HOMEVAR/VirtualBox VMs/$VMNAME/$VMNAME.vdi"

# 128 MB Video RAM.
# Settings->Display->Video Memory->128 MB.
sudo -u $USERNAME VBoxManage modifyvm "$VMNAME" --vram 128

# Add Adapter 1 (will be eth0), an internal network, IMPORTANT!
sudo -u $USERNAME VBoxManage modifyvm "$VMNAME" --nic1 intnet

# Remove the virtual network cable. Same reason like gateway_specific.
sudo -u $USERNAME VBoxManage modifyvm "$VMNAME" --cableconnected1 on

# Change the internal network to "Whonix", IMPORTANT!
sudo -u $USERNAME VBoxManage modifyvm "$VMNAME" --intnet1 "Whonix"

# Enter following MAC address: 080027070B08
sudo -u $USERNAME VBoxManage modifyvm "$VMNAME" --macaddress1 080027070B08

# Enable audio controller ac97.
# sb16 should be obsolete.
# ac97 is hopefully better supported than intel hda.
sudo -u $USERNAME VBoxManage modifyvm "$VMNAME" --audiocontroller ac97

# Host audio driver can be oss, alsa or pulse.
# Unfortunately, no auto detection available.
# Depends on host driver.
# Ubuntu host uses pulse audio.
sudo -u $USERNAME VBoxManage modifyvm "$VMNAME" --audio pulse
}



hardware_modifications() {
# Thanks to:
# - http://www.dedmeet.com/software-projects-mainmenu-12/asus-recovery-cd-with-virtualbox.html
# - https://www.virtualbox.org/ticket/7325
# Hiding BIOS information.
#
#
#sudo -u $USERNAME VBoxManage setextradata "$VMNAME" 'VBoxInternal/Devices/pcbios/0/Config/DmiBIOSVendor'        'American Megatrends Inc.'
#sudo -u $USERNAME VBoxManage setextradata "$VMNAME" 'VBoxInternal/Devices/pcbios/0/Config/DmiBIOSVersion'       'string:N61Jq.204'
#sudo -u $USERNAME VBoxManage setextradata "$VMNAME" 'VBoxInternal/Devices/pcbios/0/Config/DmiBIOSReleaseDate'   'string:01/05/2010'
#sudo -u $USERNAME VBoxManage setextradata "$VMNAME" 'VBoxInternal/Devices/pcbios/0/Config/DmiBIOSReleaseMajor'  '4'
#sudo -u $USERNAME VBoxManage setextradata "$VMNAME" 'VBoxInternal/Devices/pcbios/0/Config/DmiBIOSReleaseMinor'  '6'
#sudo -u $USERNAME VBoxManage setextradata "$VMNAME" 'VBoxInternal/Devices/pcbios/0/Config/DmiBIOSFirmwareMajor' '152'
#sudo -u $USERNAME VBoxManage setextradata "$VMNAME" 'VBoxInternal/Devices/pcbios/0/Config/DmiBIOSFirmwareMinor' '152'
#sudo -u $USERNAME VBoxManage setextradata "$VMNAME" 'VBoxInternal/Devices/pcbios/0/Config/DmiSystemVendor'      'ASUSTeK Computer Inc.'
#sudo -u $USERNAME VBoxManage setextradata "$VMNAME" 'VBoxInternal/Devices/pcbios/0/Config/DmiSystemProduct'     'N61Jq'
#sudo -u $USERNAME VBoxManage setextradata "$VMNAME" 'VBoxInternal/Devices/pcbios/0/Config/DmiSystemVersion'     '1.0'
#sudo -u $USERNAME VBoxManage setextradata "$VMNAME" 'VBoxInternal/Devices/pcbios/0/Config/DmiSystemSerial'      '###############'
#sudo -u $USERNAME VBoxManage setextradata "$VMNAME" 'VBoxInternal/Devices/pcbios/0/Config/DmiSystemUuid'        '###############'
#sudo -u $USERNAME VBoxManage setextradata "$VMNAME" 'VBoxInternal/Devices/pcbios/0/Config/DmiSystemFamily'      'To Be Filled By O.E.M.'
#
#
sudo -u $USERNAME VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/pcbios/0/Config/DmiBIOSVendor"        "BIOS Vendor"
sudo -u $USERNAME VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/pcbios/0/Config/DmiBIOSVersion"       "BIOS Version"
sudo -u $USERNAME VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/pcbios/0/Config/DmiBIOSReleaseDate"   "BIOS Release Date"
sudo -u $USERNAME VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/pcbios/0/Config/DmiBIOSReleaseMajor"  1
sudo -u $USERNAME VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/pcbios/0/Config/DmiBIOSReleaseMinor"  2
sudo -u $USERNAME VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/pcbios/0/Config/DmiBIOSFirmwareMajor" 3
sudo -u $USERNAME VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/pcbios/0/Config/DmiBIOSFirmwareMinor" 4
sudo -u $USERNAME VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/pcbios/0/Config/DmiSystemVendor"      "System Vendor"
sudo -u $USERNAME VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/pcbios/0/Config/DmiSystemProduct"     "System Product"
sudo -u $USERNAME VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/pcbios/0/Config/DmiSystemVersion"     "System Version"
sudo -u $USERNAME VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/pcbios/0/Config/DmiSystemSerial"      "System Serial"
sudo -u $USERNAME VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/pcbios/0/Config/DmiSystemSKU"         "System SKU"
sudo -u $USERNAME VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/pcbios/0/Config/DmiSystemFamily"      "System Family"
sudo -u $USERNAME VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/pcbios/0/Config/DmiSystemUuid"        "9852bf98-b83c-49db-a8de-182c42c7226b"

# TODO VBOX: Wait for next Virtual Box version.
# Not yet available.
# http://wiki.ubuntuusers.de/Dualboot-Windows_virtualisieren
#sudo -u $USERNAME VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/pcbios/0/Config/DmiChassisAssetTag" "<EMPTY>"
#sudo -u $USERNAME VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/pcbios/0/Config/DmiChassisSerial" "<EMPTY>"
#sudo -u $USERNAME VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/pcbios/0/Config/DmiChassisVendor" "string:Medion"
#sudo -u $USERNAME VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/pcbios/0/Config/DmiChassisVersion" "string:N/A"
# https://forums.virtualbox.org/viewtopic.php?f=2&t=43678
#sudo -u $USERNAME VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/pcbios/0/Config/DmiBoardProduct""D2560-A2"
#sudo -u $USERNAME VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/pcbios/0/Config/DmiBoardVendor" "FUJITSU SIEMENS"
#sudo -u $USERNAME VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/pcbios/0/Config/DmiSystemProduct" "ESPRIMO P"
#sudo -u $USERNAME VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/pcbios/0/Config/DmiSystemVendor" "FUJITSU SIEMENS"

# Configuring the hard disk vendor product data (VPD)
# http://www.virtualbox.org/manual/ch09.html#changevpd

# Port0 (hdd)
sudo -u $USERNAME VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/ahci/0/Config/Port0/SerialNumber" "serial"
sudo -u $USERNAME VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/ahci/0/Config/Port0/FirmwareRevision" "firmware"
sudo -u $USERNAME VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/ahci/0/Config/Port0/ModelNumber" "model"
sudo -u $USERNAME VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/ahci/0/Config/Port0/ATAPIVendorId" "vendor"
sudo -u $USERNAME VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/ahci/0/Config/Port0/ATAPIProductId" "product"
sudo -u $USERNAME VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/ahci/0/Config/Port0/ATAPIRevision" "revi"

# Port1 (cd-rom)
sudo -u $USERNAME VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/ahci/0/Config/Port1/SerialNumber" "serial"
sudo -u $USERNAME VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/ahci/0/Config/Port1/FirmwareRevision" "firmware"
sudo -u $USERNAME VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/ahci/0/Config/Port1/ModelNumber" "model"
sudo -u $USERNAME VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/ahci/0/Config/Port1/ATAPIVendorId" "vendor"
sudo -u $USERNAME VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/ahci/0/Config/Port1/ATAPIProductId" "product"
sudo -u $USERNAME VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/ahci/0/Config/Port1/ATAPIRevision" "revi"

# Show changes.
sudo -u $USERNAME VBoxManage getextradata "$VMNAME" enumerate
}



# Currently not in use. Currently not needed for anything anymore.
start_vm() {
   trap "error_handler" ERR INT TERM

   : echo "whonix_createvm: $VMNAME starting..."

   sudo -u $USERNAME VBoxSDL --startvm "$VMNAME"

   : echo "whonix_createvm: Virtual Box terminated without error messages."
   : echo "whonix_createvm: This is no guarantee everything went well inside the VM."
}



delete_vm() {
trap "error_handler" ERR INT TERM

# Turning off the VM without saving.
sudo -u $USERNAME VBoxManage controlvm "$VMNAME" poweroff || true
sync

# Delete old Whonix-Gateway.
sudo -u $USERNAME VBoxManage unregistervm "$VMNAME" --delete || true
sync

# The "VBoxManage unregistervm  --delete" does not do its job,
# we have to manually delete the VM folder.
sudo -u $USERNAME rm -r "$HOMEVAR/VirtualBox VMs/$VMNAME" || true
sync

# Delete old ova.
rm "$HOMEVAR/whonix_binary/$VMNAME".ova || true
sync
}



################################################################ 
# no option chosen                                             #
################################################################ 
if [[ $# == 0 ]]; then
   : echo "No option chosen. Use -help for help."
   touch /home/$USERNAME/whonix_binary/WHONIX_BUILD_FAILED || true
   exit 1
fi

################################################################ 
# -help                                                        #
################################################################ 
if [[ "$1" = "-help" ]]; then
   script_help
   exit 0
fi

################################################################ 
# -tg-createimg                                                #
################################################################ 
if [[ "$1" = "-tg-createimg" ]]; then
   root_check
   VMNAME="Whonix-Gateway"
   VMSIZE="2G"
   create_img
   : echo "BUILD INFO: Done, if success, next step should be: see sudo ./whonix_createvm -help"
   exit 0
fi

################################################################ 
# -tg-copyimg                                                  #
################################################################ 
if [[ "$1" = "-tg-copyimg" ]]; then
   root_check
   VMNAME="Whonix-Gateway"
   copy_img
   : echo "BUILD INFO: Done, if success, next step should be: see sudo ./whonix_createvm -help"
   exit 0
fi

################################################################ 
# -tg-converttovdi                                             #
################################################################ 
if [[ "$1" = "-tg-converttovdi" ]]; then
   root_check
   VMNAME="Whonix-Gateway"
   convert_to_vdi
   : echo "BUILD INFO: Done, if success, next step should be: see sudo ./whonix_createvm -help"
   exit 0
fi

################################################################ 
# -tg-createvboxvm                                             #
################################################################ 
if [[ "$1" = "-tg-createvboxvm" ]]; then
   root_check
   VMNAME="Whonix-Gateway"
   VMRAM="128"
   general_setup
   gateway_specific
   hardware_modifications
   : echo "BUILD INFO: Done, if success, next step should be: see sudo ./whonix_createvm -help"
   exit 0
fi

################################################################ 
# -tg-copyinto                                                 #
################################################################ 
if [[ "$1" = "-tg-copyinto" ]]; then
   root_check
   VMNAME="Whonix-Gateway"
   CHROOT_FOLDER=/home/"$USERNAME"/whonix_binary/"$VMNAME"_image
   mount_img
   copy_into_vm_image_whonix_gateway
   unmount_img
   : echo "BUILD INFO: Done, if success, next step should be: see sudo ./whonix_createvm -help"
   exit 0
fi

################################################################ 
# -tg-chroot                                                   #
################################################################ 
if [[ "$1" = "-tg-chroot" ]]; then
   root_check
   VMNAME="Whonix-Gateway"
   CHROOT_FOLDER=/home/"$USERNAME"/whonix_binary/"$VMNAME"_image
   mount_img
   do_chroot
   inside_chroot
   do_unchroot
   unmount_img
   : echo "BUILD INFO: Done, if success, next step should be: see sudo ./whonix_createvm -help"
   exit 0
fi

################################################################ 
# -tg-interactive                                              #
################################################################ 
if [[ "$1" = "-tg-interactive" ]]; then
   root_check
   VMNAME="Whonix-Gateway"
   CHROOT_FOLDER=/home/"$USERNAME"/whonix_binary/"$VMNAME"_image
   mount_img
   do_chroot
   interactive_chroot
   do_unchroot
   unmount_img
   : echo "BUILD INFO: Done, if success, next step should be: see sudo ./whonix_createvm -help"
   exit 0
fi

################################################################ 
# -tg-source                                                   #
################################################################ 
if [[ "$1" = "-tg-source" ]]; then
   root_check
   VMNAME="Whonix-Gateway"
   CHROOT_FOLDER=/home/"$USERNAME"/whonix_binary/"$VMNAME"_image
   mount_img
   do_chroot
   download_sources
   do_unchroot
   move_sources
   unmount_img
   : echo "BUILD INFO: Done, if success, next step should be: see sudo ./whonix_createvm -help"
   exit 0
fi

################################################################ 
# -tg-export                                                   #
################################################################ 
if [[ "$1" = "-tg-export" ]]; then
   root_check
   VMNAME="Whonix-Gateway"
   ## TODO: Snapshot not included in exported ova.
   #: echo "whonix_createvm: Creating snapshot..."
   #sudo -u $USERNAME VBoxManage snapshot "$VMNAME" take "default" --description "$SNAPSHOT_DESCRIPTION"
   sudo -u $USERNAME VBoxManage export "$VMNAME" --output "$HOMEVAR/whonix_binary/$VMNAME".ova
   : echo "BUILD INFO: Done."
   exit 0
fi

################################################################ 
# -tg-vboxdelete                                               #
################################################################ 
if [[ "$1" = "-tg-vboxdelete" ]]; then
   root_check
   VMNAME="Whonix-Gateway"
   delete_vm
   exit 0
fi

################################################################ 
# -tg-bare-metal                                               #
################################################################ 
if [[ "$1" = "-tg-bare-metal" ]]; then
   root_check
   VMNAME="Whonix-Gateway"
   CHROOT_FOLDER=""
   copy_into_vm_image_whonix_gateway
   : echo "BUILD INFO: Done, if success, next step should be: see sudo ./whonix_createvm -help"
   exit 0
fi

################################################################ 
# -tw-createimg                                                #
################################################################ 
if [[ "$1" = "-tw-createimg" ]]; then
   root_check
   VMNAME="Whonix-Workstation"
   VMSIZE="50G"
   create_img
   : echo "BUILD INFO: Done, if success, next step should be: see sudo ./whonix_createvm -help"
   exit 0
fi

################################################################ 
# -tw-copyimg                                                  #
################################################################ 
if [[ "$1" = "-tw-copyimg" ]]; then
   root_check
   VMNAME="Whonix-Workstation"
   copy_img
   : echo "BUILD INFO: Done, if success, next step should be: see sudo ./whonix_createvm -help"
   exit 0
fi

################################################################ 
# -tw-converttovdi                                             #
################################################################ 
if [[ "$1" = "-tw-converttovdi" ]]; then
   root_check
   VMNAME="Whonix-Workstation"
   convert_to_vdi
   : echo "BUILD INFO: Done, if success, next step should be: see sudo ./whonix_createvm -help"
   exit 0
fi

################################################################ 
# -tw-createvboxvm                                             #
################################################################ 
if [[ "$1" = "-tw-createvboxvm" ]]; then
   root_check
   VMNAME="Whonix-Workstation"
   VMRAM="768"
   general_setup
   workstation_specific
   hardware_modifications
   : echo "BUILD INFO: Done, if success, next step should be: see sudo ./whonix_createvm -help"
   exit 0
fi

################################################################ 
# -tw-copyinto                                                 #
################################################################ 
if [[ "$1" = "-tw-copyinto" ]]; then
   root_check
   VMNAME="Whonix-Workstation"
   CHROOT_FOLDER=/home/"$USERNAME"/whonix_binary/"$VMNAME"_image
   mount_img
   copy_into_vm_image_whonix_workstation
   unmount_img
   : echo "BUILD INFO: Done, if success, next step should be: see sudo ./whonix_createvm -help"
   exit 0
fi

################################################################ 
# -tw-chroot                                                   #
################################################################ 
if [[ "$1" = "-tw-chroot" ]]; then
   root_check
   VMNAME="Whonix-Workstation"
   CHROOT_FOLDER=/home/"$USERNAME"/whonix_binary/"$VMNAME"_image
   mount_img
   do_chroot
   inside_chroot
   do_unchroot
   unmount_img
   : echo "BUILD INFO: Done, if success, next step should be: see sudo ./whonix_createvm -help"
   exit 0
fi

################################################################ 
# -tw-interactive                                              #
################################################################ 
if [[ "$1" = "-tw-interactive" ]]; then
   root_check
   VMNAME="Whonix-Workstation"
   CHROOT_FOLDER=/home/"$USERNAME"/whonix_binary/"$VMNAME"_image
   mount_img
   do_chroot
   interactive_chroot
   do_unchroot
   unmount_img
   : echo "BUILD INFO: Done, if success, next step should be: see sudo ./whonix_createvm -help"
   exit 0
fi

################################################################ 
# -tw-source                                                   #
################################################################ 
if [[ "$1" = "-tw-source" ]]; then
   root_check
   VMNAME="Whonix-Workstation"
   CHROOT_FOLDER=/home/"$USERNAME"/whonix_binary/"$VMNAME"_image
   mount_img
   do_chroot
   download_sources
   do_unchroot
   move_sources
   unmount_img
   : echo "BUILD INFO: Done, if success, next step should be: see sudo ./whonix_createvm -help"
   exit 0
fi

################################################################ 
# -tw-export                                                   #
################################################################ 
if [[ "$1" = "-tw-export" ]]; then
   root_check
   VMNAME="Whonix-Workstation"
   ## TODO: Snapshot not included in exported ova.
   #: echo "whonix_createvm: Creating snapshot..."
   #sudo -u $USERNAME VBoxManage snapshot "$VMNAME" take "default" --description "$SNAPSHOT_DESCRIPTION"
   sudo -u $USERNAME VBoxManage export "$VMNAME" --output "$HOMEVAR/whonix_binary/$VMNAME".ova
   : echo "BUILD INFO: Done."
   exit 0
fi

################################################################ 
# -tw-vboxdelete                                               #
################################################################ 
if [[ "$1" = "-tw-vboxdelete" ]]; then
   root_check
   VMNAME="Whonix-Workstation"
   delete_vm
   exit 0
fi

################################################################ 
# -tw-bare-metal                                               #
################################################################ 
if [[ "$1" = "-tw-bare-metal" ]]; then
   root_check
   VMNAME="Whonix-Workstation"
   CHROOT_FOLDER=""
   copy_into_vm_image_whonix_workstation
   : echo "BUILD INFO: Done, if success, next step should be: see sudo ./whonix_createvm -help"
   exit 0
fi

################################################################ 
# -tg-mountimg                                                 #
################################################################ 
if [[ "$1" = "-tg-mountimg" ]]; then
   root_check
   VMNAME="Whonix-Gateway"
   CHROOT_FOLDER=/home/"$USERNAME"/whonix_binary/"$VMNAME"_image
   mount_img
   : echo "INFO: mount done."
   : echo "- Mounted to: cd \"$CHROOT_FOLDER\""
   : echo "- Leave the folder after you are done!!! cd ~"
   : echo "- Do not forget to run: sudo ./whonix_createvm -tg-unmountimg"
   : echo "- Otherwise strange bugs may occur."
   exit 0
fi

################################################################ 
# -tg-unmountimg                                               #
################################################################ 
if [[ "$1" = "-tg-unmountimg" ]]; then
   root_check
   VMNAME="Whonix-Gateway"
   CHROOT_FOLDER=/home/"$USERNAME"/whonix_binary/"$VMNAME"_image
   unmount_img
   : echo "INFO: unmount done."
   exit 0
fi

################################################################ 
# -tw-mountimg                                                 #
################################################################ 
if [[ "$1" = "-tw-mountimg" ]]; then
   root_check
   VMNAME="Whonix-Workstation"
   CHROOT_FOLDER=/home/"$USERNAME"/whonix_binary/"$VMNAME"_image
   mount_img
   : echo "INFO: mount done."
   : echo "- Mounted to: cd \"$CHROOT_FOLDER\""
   : echo "- Leave the folder after you are done!!! cd ~"
   : echo "- Do not forget to run: sudo ./whonix_createvm -tw-unmountimg"
   : echo "- Otherwise strange bugs may occur."
   exit 0
fi

################################################################ 
# -tw-unmountimg                                               #
################################################################ 
if [[ "$1" = "-tw-unmountimg" ]]; then
   root_check
   VMNAME="Whonix-Workstation"
   CHROOT_FOLDER=/home/"$USERNAME"/whonix_binary/"$VMNAME"_image
   unmount_img
   echo "INFO: unmount done."
   exit 0
fi

################################################################ 
# -tg-mountvdi                                                 #
################################################################ 
if [[ "$1" = "-tg-mountvdi" ]]; then
   root_check
   VMNAME="Whonix-Gateway"
   CHROOT_FOLDER=/home/"$USERNAME"/whonix_binary/"$VMNAME"_image
   mount_vdi
   : echo "INFO: mount done."
   : echo "- Mounted to: cd \"$CHROOT_FOLDER\""
   : echo "- Leave the folder after you are done!!! cd ~"
   : echo "- Do not forget to run: sudo ./whonix_createvm -tg-unmountvdi"
   : echo "- Otherwise strange bugs may occur."
   exit 0
fi

################################################################ 
# -tg-unmountvdi                                               #
################################################################ 
if [[ "$1" = "-tg-unmountvdi" ]]; then
   root_check
   VMNAME="Whonix-Gateway"
   CHROOT_FOLDER=/home/"$USERNAME"/whonix_binary/"$VMNAME"_image
   unmount_vdi
   : echo "INFO: unmount done."
   exit 0
fi

################################################################ 
# -tw-mountvdi                                                 #
################################################################ 
if [[ "$1" = "-tw-mountvdi" ]]; then
   root_check
   VMNAME="Whonix-Workstation"
   CHROOT_FOLDER=/home/"$USERNAME"/whonix_binary/"$VMNAME"_image
   mount_vdi
   : echo "INFO: mount done."
   : echo "- Mounted to: cd \"$CHROOT_FOLDER\""
   : echo "- Leave the folder after you are done!!! cd ~"
   : echo "- Do not forget to run: sudo ./whonix_createvm -tw-unmountvdi"
   : echo "- Otherwise strange bugs may occur."
   exit 0
fi

################################################################ 
# -tw-unmountvdi                                               #
################################################################ 
if [[ "$1" = "-tw-unmountvdi" ]]; then
   root_check
   VMNAME="Whonix-Workstation"
   CHROOT_FOLDER=/home/"$USERNAME"/whonix_binary/"$VMNAME"_image
   unmount_vdi
   echo "INFO: unmount done."
   exit 0
fi
